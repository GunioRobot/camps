#!/usr/local/bin/perl

# camp information getter/setter

use strict;
use warnings;

use lib '/home/camp/lib';

use Camp::Master;
use Cwd;
use Getopt::Long;

*STDOUT->autoflush(1);
*STDERR->autoflush(1);

die "Don't run this as root!\n" if $< == 0;

my (@attribute_list, %opt, @all_fields, @requested_fields);

# populate initial attributes for Getopt based on lookup table.
my %queryable_attributes = (
    camp_number => 'get',
    camp_type   => 'get',
    vcs_type    => 'get',
    username    => 'get',
    comment     => 'getset',
);

my %attribute_aliases = (
    number => 'camp_number',
    num    => 'camp_number',
    type   => 'camp_type',
    name   => 'username',
    vcs    => 'vcs_type',
);

my %set_synonyms = (
    comment => 'm',
);


@all_fields = sort keys %queryable_attributes;

while (my ($attribute, $type) = each %queryable_attributes) {
    my @gets = $attribute;
    
    # construct a list of aliases
    while (my ($alias, $aliased_attribute) = each %attribute_aliases) {
        push @gets, $alias if $aliased_attribute eq $attribute;
    }

    my @sets = map { "set-$_" } @gets;

    for ($set_synonyms{$attribute}) {
        push @sets, $_ if $_;
    }
    
    my $get_clause = join "|", @gets;
    my $set_clause = join "|", @sets;
    
    push @attribute_list, $get_clause     if $type =~ /get/;
    push @attribute_list, "$set_clause=s" if $type =~ /set/;
}

my $USAGE=<<EOH;
Usage: camp-info [options] [number]

If the camp number is not specified, it may be inferred from the CAMP
environment variable or the current working directory.

Options:
--comment          Show the comment for the camp.
--set-comment, -m  Set the comment for the camp.
--number           Show the camp number for the camp.
--type             Show the camp type for the camp.
--vcs              Show the version control system in use for the camp.
--quiet, -q        Suppress the display of informational headers.
--no-newline, -n   Suppress the display of the newline in the output.
--separator, -s    Separate output with a specified string.
--help, -h         Show this help.
EOH

GetOptions(
    \%opt,
    "help|h",
    "quiet|q",
    "no-newline|n",
    "separator|sep=s",
    @attribute_list,
) or die $USAGE;

if ($opt{help}) {
    print $USAGE;
    exit;
}

my $display_output_headers = ! $opt{quiet};
my $camp_number = resolve_camp_number(shift);

if (!defined $camp_number) {
    exit 1 if $opt{quiet};
    die "$0: couldn't determine camp; specify in command line or CAMP environment variable\n";
}

my $info = Camp::Master::get_camp_info( $camp_number );
my $set_attribute;

# TODO: make the order of the attribute flags passed match the order of the output
foreach my $attribute (keys %queryable_attributes) {
    if ($opt{$attribute}) {
        push @requested_fields, $attribute;
    }
    if ($opt{"set-$attribute"}) {
        # TODO: generalize this; only one settable attribute now, so we're weenie-ing out.
        warn "set-$attribute not supported" and next unless $attribute eq 'comment';

        $set_attribute = 1;

        # TODO: check user privs to change the camp...
        # update the comment field;
        Camp::Master::set_camp_comment($camp_number, $opt{'set-comment'});
    }
}

@requested_fields = @all_fields unless @requested_fields || $set_attribute;

# actual output based on passed params
my $sep = $opt{separator} || qq{\n};

if (!$set_attribute) {
    print join $sep,
        map {
            ($display_output_headers ? "$_: " : '')
            . $info->{$_}
        } @requested_fields;
    print "\n" unless $opt{'no-newline'};
}
